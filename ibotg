#!/usr/bin/tclsh

# ibotg  IRC bot to Telegram: a bot that allows using Telegram from IRC
# Copyright (C) 2015,2016 E. Bosch

# MIT/X11 License

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including   
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package require picoirc

proc ::picoirc::Version context { return ibotg }

proc leer_conf co \
{
   upvar #0 argv arg   argc argn
   upvar 1 $co conf

   # configuration file key=value
   # loaded in array co

   if { $argn==1 } { set config $arg } else { set config config }
   set cf [ open $config ]
   while { [ gets $cf lin ] >= 0 } \
   {
      if { [ string range [ string trim $lin ] 0 0 ] == "#" } continue
      set lconf [ split $lin = ]
      lassign $lconf key val
      set conf([ string trim $key]) [ string trim $val ]
   }
}

proc leer_lista { flista ch ch2gr gr2ch nc2nl nci2nl nl2nc al2nc nc2al ncic2al canales } \
{
   upvar 1 $ch2gr c2g  $gr2ch g2c  $nc2nl c2l  $nci2nl ci2l  $nl2nc l2c  $al2nc a2c  $nc2al c2a  $ncic2al cic2a  $canales chans

   # nc2nl -> array de nick corto a nick largo
   # nci2nl -> array de nick corto (con prefijo interrogante) a nick largo
   # nl2nl -> array de nick largo a nick corto
   # canales -> array lista de canales de cada nick corto (sin prefijo)
   # ch2gr -> array de canal en IRC a grupo en Telegram
   # gr2ch -> array de grupo en Telegram a canal en IRC
   # al2nc -> array de alias en Telegram a nick corto
   # nc2al -> array de nick corto a alias en Telegram
   # ncic2al -> array de nick corto (con prefijo interrogante y sufijo dos puntos) a alias en Telegram (tambien envueltos
   # entre <>)

   set li [ open $flista ]
   while { [ gets $li lin ] >= 0 } \
   {
      if { [ string range [ string trim $lin ] 0 0 ] == "#" } continue
      set data [ split $lin : ]
      if { $ch == 0 } \
      {
        lassign $data nc nl al grupos
        set_contact $nc $nl $al c2l ci2l l2c a2c c2a cic2a
        if { $grupos!="" } { set chans($nc) [ split $grupos , ] }
      } \
      else \
      {
        lassign $data group chan
        set c2g($chan) $group
        set g2c($group) $chan
      }
   }
}

proc set_contact { nc nl al nc2nl nci2nl nl2nc al2nc nc2al ncic2al } \
{
   upvar 1 $nc2nl c2l  $nci2nl ci2l  $nl2nc l2c  $al2nc a2c  $nc2al c2a  $ncic2al cic2a

   set c2l($nc) $nl
   set ci2l(!$nc) $nl
   set l2c($nl) $nc
   if { $al == "-" } return
   set c2a($nc) $al
   if { $al == "" } { set x $nl } \
   else \
   {
      set x $al
      set a2c($al) ~$nc~
   }
   set cic2a(!$nc:) $x
   set cic2a(<$nc>) <$x>
}

proc parse { string hora to from mensaje tg_name tg_echo base media } \
{
   upvar #0 last lt   mpend pend
   upvar 1 $hora ho   $to t   $from f   $mensaje msg

   set items [ split $string "\x1E" ]
   lassign $items id mi hioer ho f t msg
   if { $id!="9ZxtQy" } \
   {
      if { $id=="3kdy5F" } \
      {
         if { $hioer=="1" } { append url {[ERROR]} } \
         else { append url $base [ string range $msg [ string last / $msg ] end ] }
         if { [ info exists pend($mi) ] } \
         {
            lassign $pend($mi) f t m
            unset pend($mi)
            append m " " $url
         } else \
         {
            set t $tg_name
            set f $media
            append m {[} $mi {] } $url
         }
         set msg $m
         return 1
      }
      if { $lt } { comm_last $string 2 }
      if { [ regexp -lineanchor {^\s*\[[^]]+\] .*$} $string ] } { return 2 } \
      else { return 0 }
   }
   if { $f==$tg_name && !$hioer && !$tg_echo } { return 0 }
   if { $mi>0 && !$hioer } { set pend($mi) [ list $f $t $msg ]; return 2 }
   if { [ string index $msg 0 ] == "/" } { append me " " $msg; set msg $me } 
   return 1
}

proc tg2irc { tg ir nl2nc gr2ch al2nc emoji master root tg_name tg_echo delay base media tg_verbose } \
{
   upvar 1 $ir irc   $nl2nc l2c   $gr2ch g2c   $al2nc a2c   $emoji emo

   set c [ gets $tg linea ]
   after $delay
   if { $c<0 } \
   {
      if { [ eof $tg ] } { exit }
   } else \
   {
      set res [ parse $linea hora to from mensaje $tg_name $tg_echo $base $media ]
      if { $res==1 } \
      {
         set mensaje [ string map [ array get a2c ] $mensaje ]
         set mensaje [ string map [ array get emo ] $mensaje ]
         if { [ array get g2c $to ] != "" } { set target $g2c($to) } \
         else \
         {
           if { $to != $tg_name && ![ info exists l2c($to) ] } { append mes {[T:} $to {] } $mensaje; set mensaje $mes }
           set target $master
         }
         if { [ info exists l2c($from) ] } { set usu $l2c($from) } \
         else { set usu unknown; append me {[F:} $from {] } $mensaje; set mensaje $me }
         picoirc::post $irc($usu) $target $mensaje
      } \
      elseif { $res==0 && $tg_verbose } { picoirc::post $irc($root) $master [ string range $linea 0 400 ] }
   }
}

proc irc2tg { irc estado args } \
{
   upvar #0 tg tp  ncirc nci  nc2nl c2l  nci2nl ci2l  canales chans  co conf  njd noj  ch2gr c2g  ncic2al cic2a
   set mast $conf(master)
   set r00t $conf(root)

   switch -exact -- $estado \
   {
      debug \
      {
         lassign $args tipo mensaje
         if { $noj($irc) && \
              $tipo=="read" && \
              [ string first MOTD $mensaje ] != -1 \
            } \
            {
               foreach chan $chans($nci($irc)) { picoirc::post $irc "" "/join $chan" }
               set noj($irc) 0
            }
      }
      chat \
      {
         lassign $args target sender mensaje tipo

         # $nci($irc) -> nick de la conexion (destino)
         # sender -> nick remitente
         # target -> nick destino (privado) o canal

         set ischan [ info exists c2g($target) ]
         if { $sender==$mast } \
         {
            if { $nci($irc)==$r00t } \
            {
               if { $ischan } \
               {
                  set mensaje [ string map [ array get cic2a ] $mensaje ]
                  puts $tp "msg $c2g($target) $mensaje"
               } \
               elseif { $target==$r00t } \
               {
                  set mensaje [ string map [ array get ci2l ] $mensaje ]
                  set mensaje [ string map [ array get c2g ] $mensaje ]
                  set menstrl [ string trimleft $mensaje ]
                  if { [ string index $menstrl 0 ] == "!" } { command $menstrl } \
                  else { puts $tp $mensaje }
               }
            } \
            elseif { $nci($irc)==$target } { puts $tp "msg $c2l($target) $mensaje" }	
         }
      }
      close exit
   }
}

proc command com \
{
   set lc [ split [ supertrim $com ] ]
   set c0 [ lindex $lc 0 ]
   switch -exact -- $c0 \
   {
      "!last" { comm_last $lc 1 }
      "!chcon" { comm_chcon $lc }
      "!list" comm_list
   }
}

proc comm_last { line fase } \
{
   upvar #0 tg tp   last lt   arg ar   nc2nl c2l   co(last_add) add

   if { $fase==1 } \
   {   
      set lt 1
      set ar [ lsearch -inline -start 1 -not $line {} ]
      puts $tp dialog_list
   } \
   elseif { $fase==2 } \
   {
      set ars [ string map { _ " " } $ar ]
      if { [ regexp -lineanchor "^(Chat|User) $ars: (\[0-9\]+) unread$" $line - -> msgs ] } \
      {
         set lt 0
         set msgs [ expr $msgs + $add ]
         puts $tp "history $ar $msgs"
      }
   }   
}

proc comm_chcon items \
{
   upvar #0 nc2nl c2l  nci2nl ci2l  nl2nc l2c  al2nc a2c  nc2al c2a  ncic2al cic2a  irc i  co c

   lassign $items - nc nl al
   if { ![ info exists c2l($nc) ] } return
   set_contact $nc $nl $al c2l ci2l l2c a2c c2a cic2a
   picoirc::post $i($c(root)) $c(master) "Changed: $nc $c2l($nc) $c2a($nc)"
}

proc comm_list {} \
{
   upvar #0 nc2nl c2l   nc2al c2a   irc i   co cf   ch2gr c2g

   picoirc::post $i($cf(root)) $cf(master) "IRCNICK   TELEGRAM_NAME        ALIAS"
   foreach { c l } [ array get c2l ] \
   {
      if { $l != "" && $l != $cf(media) } \
      {
         after $cf(delay_line)
         picoirc::post $i($cf(root)) $cf(master) [ format "%-9s %-20s %-20s" $c $l $c2a($c) ]
      }
   }
   picoirc::post $i($cf(root)) $cf(master) "IRC_CHANNEL      TELEGRAM_GROUP"
   foreach { ch g } [ array get c2g ] \
   {
      after $cf(delay_line)
      picoirc::post $i($cf(root)) $cf(master) [ format "%-16s %-60s" $ch $g ]
   }
}

proc supertrim str { return [ regsub -all { {2,}} $str { } ] }

set last 0
set arg ""
array set co {}
array set mpend {}

leer_conf co

leer_lista $co(contact_file) 0 ch2gr gr2ch nc2nl nci2nl nl2nc al2nc nc2al ncic2al canales
leer_lista $co(channel_file) 1 ch2gr gr2ch nc2nl nci2nl nl2nc al2nc nc2al ncic2al canales

if { $co(convert_emoji) } { source emoji2emoticon.tcl }

foreach ni [ array names nc2nl ] \
{
   set irc($ni) [ picoirc::connect irc2tg $ni $co(pass) "irc://$co(serv):$co(port)" ] 
   set ncirc($irc($ni)) $ni
   set njd($irc($ni)) [ info exists canales($ni) ]
   after $co(delay_join)
}

set tg [ open |$co(bintg) w+ ]
fconfigure $tg -blocking 0 -buffering line -encoding utf-8
fileevent $tg readable { tg2irc $tg irc nl2nc gr2ch al2nc emoji $co(master) $co(root) $co(tg_name) \
                                $co(tg_echo) $co(delay_line) $co(media_base) $co(media) $co(tg_verbose) }

vwait forever
